plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'soat-project'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

bootJar {
	archiveFileName = 'app.jar'
}

jar {
	enabled = false
}

repositories {
	mavenCentral()
}

sourceSets {
	testIntegration {
		java {
			srcDir file('src/testIntegration/java')
		}
		resources {
			srcDir file('src/testIntegration/resources')
		}
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += output + compileClasspath
	}
}

tasks.withType(Copy).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

apply from: 'gradle/test-integration.gradle'

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter-data-jpa') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-aop'
		exclude group: 'org.hibernate.orm', module: 'hibernate-jcache'
	}

	implementation ('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-json'
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-el'
	}
	implementation 'org.springframework.boot:spring-boot-starter-undertow'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	runtimeOnly 'org.postgresql:postgresql'

	// Spring WebFlux
	implementation ('org.springframework.boot:spring-boot-starter-webflux') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-reactor-netty'
	}

	// Spring actuator
	implementation ('org.springframework.boot:spring-boot-starter-actuator') {
		exclude group: 'io.micrometer', module: 'micrometer-observation'
		exclude group: 'io.micrometer', module: 'micrometer-commons'
	}

	// ZXing
	implementation 'com.google.zxing:core:3.5.1'
	implementation 'com.google.zxing:javase:3.5.1'

	// Json Web Token (JWT)
	implementation('io.jsonwebtoken:jjwt-api:0.12.5')
	runtimeOnly('io.jsonwebtoken:jjwt-impl:0.12.5')
	runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.12.5')

	// Spring Jakarta Validation
	implementation ('org.springframework.boot:spring-boot-starter-validation') {
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-el'
	}

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Testcontainers para PostgreSQL
	testImplementation("org.testcontainers:junit-jupiter:1.19.7")
	testImplementation("org.testcontainers:postgresql:1.19.7")

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}